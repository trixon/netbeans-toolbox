/*
 * Copyright 2014 Patrik Karlsson.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.toolbox.core.startpage;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.prefs.Preferences;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.TopComponent;
import se.trixon.almond.about.AboutAction;

/**
 *
 * @author Patrik Karlsson <patrik@trixon.se>
 */
@ConvertAsProperties(
        dtd = "-//se.trixon.toolbox.core//StartPage//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "StartPageTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "se.trixon.toolbox.core.StartPageTopComponent")
@ActionReference(path = "Menu/Help", position = 1300)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_StartPageAction",
        preferredID = "StartPageTopComponent"
)
@Messages({
    "CTL_StartPageAction=Start Page",
    "CTL_StartPageTopComponent=Start Page"
})
public final class StartPageTopComponent extends TopComponent {

    public static final String KEY_SHOW_START_PAGE_ON_STARTUP = "showStartPageOnStartup";
    private final Preferences mPreferences;

    public StartPageTopComponent() {
        mPreferences = NbPreferences.forModule(StartPageTopComponent.class);
        initComponents();
        setName(Bundle.CTL_StartPageTopComponent());
        headerLabel.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        copyrightLabel.setText(AboutAction.getAboutBundle().getString("application.copyright"));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        int w = getWidth();
        int h = getHeight();
        Color upperColor = Color.RED;
        Color lowerColor = Color.WHITE;
        GradientPaint gp = new GradientPaint(0, 0, upperColor, 0, h, lowerColor);
        g2d.setPaint(gp);
        g2d.fillRect(0, 0, w, h);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerLabel = new javax.swing.JLabel();
        startCheckBox = new javax.swing.JCheckBox();
        playerManagerPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        copyrightLabel = new javax.swing.JLabel();

        headerLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        headerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/trixon/toolbox/core/startpage/logo.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(headerLabel, org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.headerLabel.text")); // NOI18N
        headerLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        headerLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        headerLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        headerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                headerLabelMouseClicked(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(startCheckBox, org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.startCheckBox.text")); // NOI18N
        startCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startCheckBoxActionPerformed(evt);
            }
        });

        playerManagerPanel.setBackground(java.awt.Color.white);
        playerManagerPanel.setPreferredSize(new java.awt.Dimension(0, 8));

        javax.swing.GroupLayout playerManagerPanelLayout = new javax.swing.GroupLayout(playerManagerPanel);
        playerManagerPanel.setLayout(playerManagerPanelLayout);
        playerManagerPanelLayout.setHorizontalGroup(
            playerManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        playerManagerPanelLayout.setVerticalGroup(
            playerManagerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        org.openide.awt.Mnemonics.setLocalizedText(copyrightLabel, "copyright"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerManagerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(headerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(startCheckBox))
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(copyrightLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startCheckBox)
                    .addComponent(headerLabel))
                .addGap(27, 27, 27)
                .addComponent(playerManagerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addComponent(copyrightLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startCheckBoxActionPerformed
        mPreferences.putBoolean(KEY_SHOW_START_PAGE_ON_STARTUP, startCheckBox.isSelected());
    }//GEN-LAST:event_startCheckBoxActionPerformed

    private void headerLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerLabelMouseClicked
        try {
            URI mUri = new URI(AboutAction.getAboutBundle().getString("application.uri"));
            Desktop.getDesktop().browse(mUri);
        } catch (IOException | URISyntaxException ex) {
            System.err.println(ex);
        }

    }//GEN-LAST:event_headerLabelMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel playerManagerPanel;
    private javax.swing.JCheckBox startCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        startCheckBox.setSelected(mPreferences.getBoolean(KEY_SHOW_START_PAGE_ON_STARTUP, true));
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0"); //NOI18N
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version"); //NOI18N
    }
}
